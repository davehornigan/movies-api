name: Build and push docker image

on:
  workflow_dispatch:
  push:
    tags:
      - "**"
  pull_request:
    branches:
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    permissions:
      contents: write
      id-token: write
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags[0] }}

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Generate OpenAPI Clients/Servers
        run: make gen

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          context: git
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: ./docker/Dockerfile
          target: api
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    if: ${{ github.event_name != 'pull_request' && needs.build-and-push-image.outputs.image-tag != '' }}
    needs:
      - build-and-push-image
    name: Pass the received secret to an action
    uses: ./.github/workflows/deploy.yaml
    with:
      image: ${{ needs.build-and-push-image.outputs.image-tag }}
      ssh-host: ${{ vars.PUBLISH_SERVER_HOST }}
      ssh-user: ${{ vars.PUBLISH_SERVER_USER }}
      ssh-port: ${{ vars.PUBLISH_SERVER_PORT }}
      api-port: ${{ vars.API_PORT }}
      tmdb-api-host: ${{ vars.TMDB_API_SERVER }}
    secrets: inherit